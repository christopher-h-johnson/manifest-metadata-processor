buildscript {
    repositories {
        mavenCentral()
    }
 }

plugins {
    id 'application'
}

ext {
    /* Dependencies */
    camelVersion = '2.23.1'
    commonsIoVersion = '2.7'
    commonsRdfVersion = '0.5.0'
    commonsRdfSimpleVersion = '0.5.0'
    commonsRdfJenaVersion = '5.1.0'
    elasticsearchVersion = '6.2.2'
    imageMetadataVersion = '0.2.0-SNAPSHOT'
    iiifVocabularyVersion = '0.1.1'
    jacksonVersion = '2.17.2'
    jsonldVersion = '0.12.0'
    leptonicaVersion = '1.75.3-1.4.1'
    lombokVersion = '1.18.34'
    slf4jVersion = '1.7.25'
    tesseractVersion = '3.05.01-1.4.1'
    trellisClientVersion = '0.3.0-SNAPSHOT'
    xbeamVersion = '1.4.16'

    /* Testing */
    jaxbVersion = '2.3.0'
    activationApiVersion = '1.2.0'
    junitVersion = '5.9.3'
    jaxbVersion = '2.3.0'
    jenaVersion = '5.1.0'
    activationVersion = '1.1.1'
    logbackVersion = '1.5.7'
    apiguardianVersion = '1.0.0'

    /* Transitive patched modules */
    commonsLoggingVersion = '1.2'
    jaxbCoreVersion = '2.2.11'
    httpClientOsgiVersion = '4.5.3'
    httpCoreOsgiVersion = '4.4.6'

    jacocoVersion = '0.8.1'
    checkstyleVersion = '8.8'
}

allprojects { subproject ->

    ext {
        name = 'Manifest Metadata Processor API'
        description = 'A Camel LDP implementation'
        vendor = 'pandorasystems'
        homepage = 'http://www.trellisldp.org'
        url = 'http://www.trellisldp.org/apidocs'
        license = 'Apache 2'
        inceptionYear = '2018'
    }

    group = 'de.ubleipzig'

    repositories {
        mavenCentral()
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots'
        }
    }

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(11)
        }
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'

    sourceCompatibility = 1.11
    targetCompatibility = 1.11

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile).tap {
            configureEach {
                options.compilerArgs.add("-Xlint:unchecked")
                options.compilerArgs.add("-Xlint:deprecation")
            }
        }
    }


    dependencies {
        compileOnly("org.projectlombok:lombok:$lombokVersion")
        annotationProcessor("org.projectlombok:lombok:$lombokVersion")
        testCompileOnly("org.projectlombok:lombok:$lombokVersion")
        testAnnotationProcessor("org.projectlombok:lombok:$lombokVersion")
        testImplementation ("org.junit.jupiter:junit-jupiter-api:$junitVersion")
        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junitVersion")
    }

    tasks.named('test') {
        useJUnitPlatform()
    }

    tasks.register('processConfig', Copy) {
        from('src/main/cfg') {
            include '**/*.cfg'
        }
        into 'build/cfg/main'
    }

    classes {
        classes.dependsOn processConfig
    }
}
